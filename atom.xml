<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.nluyou.com/"/>
  <updated>2018-02-20T05:49:49.400Z</updated>
  <id>http://blog.nluyou.com/</id>
  
  <author>
    <name>Kevin Que</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Django + mysql + bootstrap 配置</title>
    <link href="http://blog.nluyou.com/2017/06/26/Django/"/>
    <id>http://blog.nluyou.com/2017/06/26/Django/</id>
    <published>2017-06-26T14:23:18.000Z</published>
    <updated>2018-02-20T05:49:49.400Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h2><p>1.windows: win 10 x64<br>2.python: python 3.5<br>3.Django: 1.11.2<br>4.mysql: mysql-5.6.36<br>5.bootstrap: bootstrap 3.3.7</p><h2 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h2><ol><li><p>1.安装 Django<br>pip 命令安装： (目前最新版为1.11.2)<br> pip install Django==1.11.2</p></li><li><p>2.安装 pymysql 支持mysql<br> pip install PyMySQL</p></li><li><p>3.新建项目 mysite<br> django-admin.py startproject mysite  </p></li><li><p>4.测试mysite<br>cd mysite 进入项目目录输入：<br> python manage.py runserver</p></li><li><p>5.新建APP blog<br> python manage.py startapp blog</p></li><li><p>6.修改mysql 设置<br>在mysite 目录下找到 settings.py，修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">   &apos;default&apos;: &#123;</span><br><span class="line">       &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</span><br><span class="line">       &apos;NAME&apos;: &apos;blog&apos;,</span><br><span class="line">       &apos;HOST&apos;: &apos;localhost&apos;,</span><br><span class="line">       &apos;USER&apos;: &apos;root&apos;,</span><br><span class="line">       &apos;PASSWORD&apos;: &apos;****&apos;,</span><br><span class="line">       &apos;PORT&apos;: &apos;&apos;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>7.安装mysql 略 </p></li><li><p>8.创建数据库<br> creat database blog ;<br> use blog ;<br> show database;</p></li><li><p>9.创建数据库表（同步数据库表）<br> python manage.py migrate</p></li><li><p>10.初始化数据<br>python manage.py makemigrations blog</p></li><li><p>11.查看sql语句<br>python manage.py sqlmigrate blog 0001</p></li><li><p>12.创建管理员用户<br>python manage.py createsuperuser</p></li><li><p>13.下载bootstrap<br><a href="http://getbootstrap.com/" target="_blank" rel="noopener">http://getbootstrap.com/</a>  点击 Download Bootstrap：下载 Bootstrap</p></li><li><p>14.整合Django+bootstap<br>在mysite 目录新建static目录,然后在static目录下面创建一个bootstrap目录.将解压后的bootstrap/dist里面的内容放到/static/bootstrap/里面.</p></li><li><p>15.修改Django配置文件<br>修改settings.py文件<br>确认是否有：<br>1.BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(<strong>file</strong>)))<br>2.INSTALLED_APPS元组里面是否有‘django.contrib.staticfiles’,<br>3.STATIC_URL = ‘/static/’<br>4.STATICFILES_DIRS = os.path.join(BASE_DIR, ‘static’),</p></li><li><p>16.建立templates<br>在mysite\blog 目录下创建templates, 里面新建 index.html </p></li><li><p>17.建立model<br>在blog 目录里找到 models.py，修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line">from django.contrib import admin</span><br><span class="line"># Create your models here.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class BlogsPost(models.Model):</span><br><span class="line">    title = models.CharField(max_length=150)</span><br><span class="line">    body = models.TextField()</span><br><span class="line">    timestamp = models.DateTimeField()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class BlogPostAdmin(admin.ModelAdmin):</span><br><span class="line">    list_display = (&apos;title&apos;, &apos;timestamp&apos;)</span><br><span class="line"></span><br><span class="line">admin.site.register(BlogsPost, BlogPostAdmin)</span><br></pre></td></tr></table></figure></li><li><p>18.建立view<br>在blog 目录里找到 views.py，修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from django.shortcuts import render</span><br><span class="line"></span><br><span class="line"># Create your views here.</span><br><span class="line">from blog.models import BlogsPost</span><br><span class="line">from django.shortcuts import render_to_response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def index(request):</span><br><span class="line">    blog_list = BlogsPost.objects.all()</span><br><span class="line">    return render_to_response(&apos;index.html&apos;, &#123;&apos;blog_list&apos;: blog_list&#125;)</span><br></pre></td></tr></table></figure></li><li><p>19.建立 URL 路由<br>在mysite 目录找到urls.py,修改如下：</p><figure class="highlight plain"><figcaption><span>django.conf.urls import url, include</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from blog.views import index</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(r&apos;^admin/&apos;, admin.site.urls),</span><br><span class="line">    url(r&apos;^index/$&apos;, index),</span><br><span class="line">    url(r&apos;^test/$&apos;, test),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;环境：&quot;&gt;&lt;a href=&quot;#环境：&quot; class=&quot;headerlink&quot; title=&quot;环境：&quot;&gt;&lt;/a&gt;环境：&lt;/h2&gt;&lt;p&gt;1.windows: win 10 x64&lt;br&gt;2.python: python 3.5&lt;br&gt;3.Django: 1.11.2&lt;
      
    
    </summary>
    
    
      <category term="Django" scheme="http://blog.nluyou.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django+bootstrap</title>
    <link href="http://blog.nluyou.com/2017/06/25/Django-bootstrap/"/>
    <id>http://blog.nluyou.com/2017/06/25/Django-bootstrap/</id>
    <published>2017-06-25T05:06:00.000Z</published>
    <updated>2018-02-20T05:49:52.992Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Bootstrap-简介"><a href="#Bootstrap-简介" class="headerlink" title="Bootstrap 简介"></a>Bootstrap 简介</h3><p>Bootstrap 是一个用于快速开发 Web 应用程序和网站的前端框架。Bootstrap 是基于 HTML、CSS、JAVASCRIPT 的。 是由 Twitter 的 Mark Otto 和 Jacob Thornton 开发的。Bootstrap 是 2011 年八月在 GitHub 上发布的开源产品。</p><h3 id="Bootstrap-环境安装"><a href="#Bootstrap-环境安装" class="headerlink" title="Bootstrap 环境安装"></a>Bootstrap 环境安装</h3><ol><li>从 <a href="http://getbootstrap.com/" target="_blank" rel="noopener">http://getbootstrap.com/</a> 上下载 Bootstrap 的最新版本 </li><li>Download Bootstrap：下载 Bootstrap,点击该按钮。</li><li>解压放到Django 框架下<br>如果我们的django项目叫做mysite,项目里面有个应用叫做blog.<br>那么我们需要在mysite下面创建一个static目录,然后在static目录下面创建一个bootstrap目录.将解压后的bootstrap/dist里面的内容放到/static/bootstrap/里面.<br>完整的路径如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">D:\mysite</span><br><span class="line">├─blog</span><br><span class="line">│  ├─migrations</span><br><span class="line">│  └─static</span><br><span class="line">│      └─img</span><br><span class="line">├─mysite</span><br><span class="line">├─static</span><br><span class="line">│  ├─bootstrap</span><br><span class="line">│  │  ├─css</span><br><span class="line">│  │  ├─fonts</span><br><span class="line">│  │  └─js</span><br><span class="line">│  └─img</span><br><span class="line">└─templates</span><br><span class="line">    └─blog</span><br><span class="line">        └─img</span><br></pre></td></tr></table></figure></li></ol><h3 id="修改Django配置文件"><a href="#修改Django配置文件" class="headerlink" title="修改Django配置文件"></a>修改Django配置文件</h3><p>修改settings.py文件<br>确认是否有：  </p><ol><li>BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(<strong>file</strong>)))</li><li>INSTALLED_APPS元组里面是否有‘django.contrib.staticfiles’,</li><li>STATIC_URL = ‘/static/’</li><li>STATICFILES_DIRS = os.path.join(BASE_DIR, ‘static’),</li></ol><h3 id="在template中调用bootstrap"><a href="#在template中调用bootstrap" class="headerlink" title="在template中调用bootstrap"></a>在template中调用bootstrap</h3><p>需要在django相关的HTML模板文件中加入一下内容来实现对bootstrap的调用<br>在文件中加入：</p><blockquote><p>{ % load staticfiles % }<br>然后在head或者body里面加入以下调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line">    &lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span><br><span class="line">    &lt;meta name=&quot;description&quot; content=&quot;&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;author&quot; content=&quot;&quot;&gt;</span><br><span class="line">    &lt;link rel=&quot;icon&quot; href=&quot;../../favicon.ico&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;title&gt;Theme Template for Bootstrap&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Bootstrap core CSS --&gt;</span><br><span class="line">    &lt;link href=&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">    &lt;!-- Bootstrap theme --&gt;</span><br><span class="line">    &lt;link href=&quot;../../dist/css/bootstrap-theme.min.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">    &lt;!-- IE10 viewport hack for Surface/desktop Windows 8 bug --&gt;</span><br><span class="line">    &lt;link href=&quot;../../assets/css/ie10-viewport-bug-workaround.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Custom styles for this template --&gt;</span><br><span class="line">    &lt;link href=&quot;theme.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Just for debugging purposes. Don&apos;t actually copy these 2 lines! --&gt;</span><br><span class="line">    &lt;!--[if lt IE 9]&gt;&lt;script src=&quot;../../assets/js/ie8-responsive-file-warning.js&quot;&gt;&lt;/script&gt;&lt;![endif]--&gt;</span><br><span class="line">    &lt;script src=&quot;../../assets/js/ie-emulation-modes-warning.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries --&gt;</span><br><span class="line">    &lt;!--[if lt IE 9]&gt;</span><br><span class="line">      &lt;script src=&quot;https://cdn.bootcss.com/html5shiv/3.7.3/html5shiv.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">      &lt;script src=&quot;https://cdn.bootcss.com/respond.js/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;![endif]--&gt;</span><br><span class="line">  &lt;/head&gt;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ol><li><p>复制HTML文件源码存为test.html，放到/tmplates 目录下<br><a href="http://v3.bootcss.com/examples/theme/" target="_blank" rel="noopener">http://v3.bootcss.com/examples/theme/</a>  </p></li><li><p>在 views.py 文件里新增：<br> from django.shortcuts import render<br> def test(request):<br> return render(request,’test.html’)</p></li><li><p>在urls.py文件里新增：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from blog.views import test</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(r&apos;^test/$&apos;, test),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Bootstrap-简介&quot;&gt;&lt;a href=&quot;#Bootstrap-简介&quot; class=&quot;headerlink&quot; title=&quot;Bootstrap 简介&quot;&gt;&lt;/a&gt;Bootstrap 简介&lt;/h3&gt;&lt;p&gt;Bootstrap 是一个用于快速开发 Web 应用程序和网
      
    
    </summary>
    
    
      <category term="Django" scheme="http://blog.nluyou.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Python 学习笔记一</title>
    <link href="http://blog.nluyou.com/2017/06/18/Python/"/>
    <id>http://blog.nluyou.com/2017/06/18/Python/</id>
    <published>2017-06-18T07:46:21.000Z</published>
    <updated>2018-02-20T05:48:34.587Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><p>1.python 简介<br>2.python 安装<br>3.hello world<br>4.声明变量与变量规则<br>5.注释<br>6.行与缩进<br>7.多行语句<br>8.用户输入<br>9.数据类型<br>10.字符串<br>11.空行<br>12.多个语句构成代码组<br>13.print 输出<br>14.import 与 from…import<br>15.命令行参数</p><h3 id="1-python-简介"><a href="#1-python-简介" class="headerlink" title="1.python 简介"></a>1.python 简介</h3><p>python的创始人为吉多·范罗苏姆（Guido van Rossum）。1989年的圣诞节期间，吉多·范罗苏姆为了在阿姆斯特丹打发时间，决心开发一个新的脚本解释程序，作为ABC语言的一种继承。Python可以应用于众多领域，如：数据分析、组件集成、网络服务、图像处理、数值计算和科学计算等众多领域。 python 是属于一种解释型语言。</p><h3 id="2-python-安装"><a href="#2-python-安装" class="headerlink" title="2.python 安装"></a>2.python 安装</h3><p><a href="https://www.python.org/downloads/" target="_blank" rel="noopener">https://www.python.org/downloads/</a>   下载最新的版本 3.X windows下一路点击next 完成安装， 注意勾选配置环境变量. Linux 下默认就有安装。<br>记得在命令行下查询python 版本<br>    &gt; python -V</p><h3 id="3-hello-world"><a href="#3-hello-world" class="headerlink" title="3.hello world"></a>3.hello world</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#_*_coding:utf-8_*_ #指定字符编码</span><br><span class="line">#!/usr/bin/env python  #指定解释器</span><br><span class="line">print(&quot;Hello World!&quot;)</span><br></pre></td></tr></table></figure><p>将以上代码保存在hello.py文件中并使用python命令执行该脚本文件。在命令行下运行如下命令即可查看<br>    &gt; python hello.py</p><h3 id="4-声明变量与变量规则"><a href="#4-声明变量与变量规则" class="headerlink" title="4.声明变量与变量规则"></a>4.声明变量与变量规则</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#_*_coding:utf-8_*_</span><br><span class="line">#!/usr/bin/env python</span><br><span class="line">name = &quot;kevin&quot;</span><br></pre></td></tr></table></figure><p>上述代码声明了一个变量，变量名为： name，变量name的值为：”kevin”　</p><h4 id="变量定义的规则："><a href="#变量定义的规则：" class="headerlink" title="变量定义的规则："></a>变量定义的规则：</h4><ol><li>变量名只能是 字母、数字或下划线的任意组合</li><li>变量名的第一个字符不能是数字</li><li>以下关键字不能声明为变量名<br>[‘and’, ‘as’, ‘assert’, ‘break’, ‘class’, ‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘exec’, ‘finally’, ‘for’, ‘from’, ‘global’, ‘if’, ‘import’, ‘in’, ‘is’, ‘lambda’, ‘not’, ‘or’, ‘pass’, ‘print’, ‘raise’, ‘return’, ‘try’, ‘while’, ‘with’, ‘yield’]</li></ol><h3 id="5-注释"><a href="#5-注释" class="headerlink" title="5.注释"></a>5.注释</h3><p>当行注视：# 被注释内容<br>多行注释：””” 被注释内容 “””</p><h3 id="6-行与缩进"><a href="#6-行与缩进" class="headerlink" title="6.行与缩进"></a>6.行与缩进</h3><p>python最具特色的就是使用缩进来表示代码块，不需要使用大括号({})。<br>缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。实例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if True:</span><br><span class="line">print (&quot;True&quot;)</span><br><span class="line">else:</span><br><span class="line">print (&quot;False&quot;)</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="7-多行语句"><a href="#7-多行语句" class="headerlink" title="7.多行语句"></a>7.多行语句</h3><p>Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠()来实现多行语句，例如：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">item_two + \</span><br><span class="line">item_three</span><br></pre></td></tr></table></figure></p><p>在 [], {}, 或 () 中的多行语句，不需要使用反斜杠()，例如：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;item_four&apos;, &apos;item_five&apos;]</span><br></pre></td></tr></table></figure></p><h3 id="8-用户输入"><a href="#8-用户输入" class="headerlink" title="8.用户输入"></a>8.用户输入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">#_*_coding:utf-8_*_</span><br><span class="line"></span><br><span class="line">name = input(&quot;What is your name?&quot;)</span><br><span class="line">print(&quot;Hello &quot; + name )</span><br></pre></td></tr></table></figure><p>输入密码时，如果想要不可见，要调用getpass 模块中的 getpass方法，即：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">import getpass</span><br><span class="line"></span><br><span class="line"># 将用户输入的内容赋值给 name 变量</span><br><span class="line">pwd = getpass.getpass(&quot;请输入密码：&quot;)</span><br><span class="line"></span><br><span class="line"># 打印输入的内容</span><br><span class="line">print(pwd)</span><br></pre></td></tr></table></figure></p><p>需要在命令行下运行解释器方可</p><h3 id="9-数据类型"><a href="#9-数据类型" class="headerlink" title="9.数据类型"></a>9.数据类型</h3><p>python中数有四种类型：整数、长整数、浮点数和复数。<br>整数， 如 1  2.46E-4 ，E标识10的幂<br>长整数 是比较大的整数<br>浮点数 如 1.23、3E-2<br>复数 如 1 + 2j、 1.1 + 2.2j</p><h3 id="10-字符串"><a href="#10-字符串" class="headerlink" title="10.字符串"></a>10.字符串</h3><ol><li>python中单引号和双引号使用完全相同。</li><li>使用三引号(‘’’或”””)可以指定一个多行字符串。</li><li>转义符 ‘\’</li><li>自然字符串， 通过在字符串前加r或R。 如 r”this is a line with \n” 则\n会显示，并不是换行。</li><li>python允许处理unicode字符串，加前缀u或U， 如 u”this is an unicode string”。</li><li>字符串是不可变的。</li><li>按字面意义级联字符串，如”this “ “is “ “string”会被自动转换为this is string。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">word = &apos;字符串&apos;</span><br><span class="line">   sentence = &quot;这是一个句子。&quot;</span><br><span class="line">   paragraph = &quot;&quot;&quot;这是一个段落，</span><br></pre></td></tr></table></figure></li></ol><p>可以由多行组成”””</p><h3 id="11-空行"><a href="#11-空行" class="headerlink" title="11.空行"></a>11.空行</h3><p>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。<br>空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。<br>记住：空行也是程序代码的一部分。</p><h3 id="12-多个语句构成代码组"><a href="#12-多个语句构成代码组" class="headerlink" title="12.多个语句构成代码组"></a>12.多个语句构成代码组</h3><p>缩进相同的一组语句构成一个代码块，我们称之代码组。<br>像if、while、def和class这样的复合语句，首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组。<br>我们将首行及后面的代码组称为一个子句(clause)。<br>如下实例：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if expression : </span><br><span class="line">     suite</span><br><span class="line">elif expression : </span><br><span class="line">    suite </span><br><span class="line">else : </span><br><span class="line">    suite</span><br></pre></td></tr></table></figure></p><h3 id="13-Print-输出"><a href="#13-Print-输出" class="headerlink" title="13.Print 输出"></a>13.Print 输出</h3><p>print 默认输出是换行的，如果要实现不换行需要在变量末尾加上 end=””：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python3</span><br><span class="line"></span><br><span class="line">x=&quot;a&quot;</span><br><span class="line">y=&quot;b&quot;</span><br><span class="line"># 换行输出</span><br><span class="line">print( x )</span><br><span class="line">print( y )</span><br><span class="line"></span><br><span class="line">print(&apos;---------&apos;)</span><br><span class="line"># 不换行输出</span><br><span class="line">print( x, end=&quot; &quot; )</span><br><span class="line">print( y, end=&quot; &quot; )</span><br><span class="line">print()</span><br></pre></td></tr></table></figure></p><p>以上实例执行结果为：</p><blockquote><p>a</p><h2 id="b"><a href="#b" class="headerlink" title="b"></a>b</h2><p>a b</p></blockquote><h3 id="14-import-与-from…import"><a href="#14-import-与-from…import" class="headerlink" title="14.import 与 from…import"></a>14.import 与 from…import</h3><p>在 python 用 import 或者 from…import 来导入相应的模块。<br>将整个模块(somemodule)导入，格式为： import somemodule<br>从某个模块中导入某个函数,格式为： from somemodule import somefunction<br>从某个模块中导入多个函数,格式为： from somemodule import firstfunc, secondfunc, thirdfunc<br>将某个模块中的全部函数导入，格式为： from somemodule import *<br>导入 sys 模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">print(&apos;================Python import mode==========================&apos;);</span><br><span class="line">print (&apos;命令行参数为:&apos;)</span><br><span class="line">for i in sys.argv:</span><br><span class="line">    print (i)</span><br><span class="line">print (&apos;\n python 路径为&apos;,sys.path)</span><br></pre></td></tr></table></figure></p><p>导入 sys 模块的 argv,path 成员<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from sys import argv,path  #  导入特定的成员</span><br><span class="line"> </span><br><span class="line">print(&apos;================python from import===================================&apos;)</span><br><span class="line">print(&apos;path:&apos;,path) # 因为已经导入path成员，所以此处引用时不需要加sys.path</span><br></pre></td></tr></table></figure></p><h3 id="15-命令行参数"><a href="#15-命令行参数" class="headerlink" title="15.命令行参数"></a>15.命令行参数</h3><p>很多程序可以执行一些操作来查看一些基本信，Python可以使用-h参数查看各参数帮助信息：<br>    &gt;    $ python -h<br>        usage: python [option] … [-c cmd | -m mod | file | -] [arg] …<br>        Options and arguments (and corresponding environment variables):<br>        -c cmd : program passed in as string (terminates option list)<br>        -d     : debug output from parser (also PYTHONDEBUG=x)<br>        -E     : ignore environment variables (such as PYTHONPATH)<br>        -h     : print this help message and exit</p><pre><code>[ etc. ]</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;h2 id=&quot;基础语法&quot;&gt;&lt;a href=&quot;#基础语法&quot; class=&quot;headerlink&quot; title=&quot;基础语法&quot;&gt;&lt;/a&gt;基础语法&lt;/h2&gt;&lt;p&gt;1.python 简介&lt;br&gt;2.python 安装&lt;br&gt;3.hello world&lt;br&gt;4.声明变量与变量规则&lt;br&gt;5.注释&lt;br&gt;6.行与缩进&lt;br&gt;7.多行语句&lt;br&gt;8.用户输入&lt;br&gt;9.数据类型&lt;br&gt;10.字符串&lt;br&gt;11.空行&lt;br&gt;12.多个语句构成代码组&lt;br&gt;13.print 输出&lt;br&gt;14.import 与 from…import&lt;br&gt;15.命令行参数&lt;/p&gt;
&lt;h3 id=&quot;1-python-简介&quot;&gt;&lt;a href=&quot;#1-python-简介&quot; class=&quot;headerlink&quot; title=&quot;1.python 简介&quot;&gt;&lt;/a&gt;1.python 简介&lt;/h3&gt;&lt;p&gt;python的创始人为吉多·范罗苏姆（Guido van Rossum）。1989年的圣诞节期间，吉多·范罗苏姆为了在阿姆斯特丹打发时间，决心开发一个新的脚本解释程序，作为ABC语言的一种继承。Python可以应用于众多领域，如：数据分析、组件集成、网络服务、图像处理、数值计算和科学计算等众多领域。 python 是属于一种解释型语言。&lt;/p&gt;
&lt;h3 id=&quot;2-python-安装&quot;&gt;&lt;a href=&quot;#2-python-安装&quot; class=&quot;headerlink&quot; title=&quot;2.python 安装&quot;&gt;&lt;/a&gt;2.python 安装&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.python.org/downloads/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.python.org/downloads/&lt;/a&gt;   下载最新的版本 3.X windows下一路点击next 完成安装， 注意勾选配置环境变量. Linux 下默认就有安装。&lt;br&gt;记得在命令行下查询python 版本&lt;br&gt;    &amp;gt; python -V&lt;/p&gt;
&lt;h3 id=&quot;3-hello-world&quot;&gt;&lt;a href=&quot;#3-hello-world&quot; class=&quot;headerlink&quot; title=&quot;3.hello world&quot;&gt;&lt;/a&gt;3.hello world&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#_*_coding:utf-8_*_ #指定字符编码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#!/usr/bin/env python  #指定解释器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&amp;quot;Hello World!&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;将以上代码保存在hello.py文件中并使用python命令执行该脚本文件。在命令行下运行如下命令即可查看&lt;br&gt;    &amp;gt; python hello.py&lt;/p&gt;
&lt;h3 id=&quot;4-声明变量与变量规则&quot;&gt;&lt;a href=&quot;#4-声明变量与变量规则&quot; class=&quot;headerlink&quot; title=&quot;4.声明变量与变量规则&quot;&gt;&lt;/a&gt;4.声明变量与变量规则&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#_*_coding:utf-8_*_&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#!/usr/bin/env python&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;name = &amp;quot;kevin&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述代码声明了一个变量，变量名为： name，变量name的值为：”kevin”　&lt;/p&gt;
&lt;h4 id=&quot;变量定义的规则：&quot;&gt;&lt;a href=&quot;#变量定义的规则：&quot; class=&quot;headerlink&quot; title=&quot;变量定义的规则：&quot;&gt;&lt;/a&gt;变量定义的规则：&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;变量名只能是 字母、数字或下划线的任意组合&lt;/li&gt;
&lt;li&gt;变量名的第一个字符不能是数字&lt;/li&gt;
&lt;li&gt;以下关键字不能声明为变量名&lt;br&gt;[‘and’, ‘as’, ‘assert’, ‘break’, ‘class’, ‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘exec’, ‘finally’, ‘for’, ‘from’, ‘global’, ‘if’, ‘import’, ‘in’, ‘is’, ‘lambda’, ‘not’, ‘or’, ‘pass’, ‘print’, ‘raise’, ‘return’, ‘try’, ‘while’, ‘with’, ‘yield’]&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;5-注释&quot;&gt;&lt;a href=&quot;#5-注释&quot; class=&quot;headerlink&quot; title=&quot;5.注释&quot;&gt;&lt;/a&gt;5.注释&lt;/h3&gt;&lt;p&gt;当行注视：# 被注释内容&lt;br&gt;多行注释：””” 被注释内容 “””&lt;/p&gt;
&lt;h3 id=&quot;6-行与缩进&quot;&gt;&lt;a href=&quot;#6-行与缩进&quot; class=&quot;headerlink&quot; title=&quot;6.行与缩进&quot;&gt;&lt;/a&gt;6.行与缩进&lt;/h3&gt;&lt;p&gt;python最具特色的就是使用缩进来表示代码块，不需要使用大括号({})。&lt;br&gt;缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。实例如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if True:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	print (&amp;quot;True&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;else:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	print (&amp;quot;False&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://blog.nluyou.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建Github-Pages博客填坑教程</title>
    <link href="http://blog.nluyou.com/2017/01/03/hexo/"/>
    <id>http://blog.nluyou.com/2017/01/03/hexo/</id>
    <published>2017-01-03T06:37:00.000Z</published>
    <updated>2018-02-20T05:48:23.610Z</updated>
    
    <content type="html"><![CDATA[<p>目录：</p><p>1.安装Hexo<br>2.部署Hexo<br>3.Hexo命令<br>4.一些报错处理<br>5.博客管理<br>6.插件（RSS、Sitemap）<br>7.评论设置<br>8.404页面<br>9.统计<br>10.更新<br>11.总结<br>12.参考引用<br>13.搭建博客相关网站<br>简述<br>本文主要讲解Hexo安装时遇到的坑，Hexo安装之后的使用教程，Hexo安装需要的环境和教程，请自行百度、谷歌。</p><p>1.安装Hexo</p><pre><code>$ npm install -g hexo</code></pre><p>坑1<br>这里可能安装失败，可能权限不够，在命令前加sudo</p><pre><code>$ sudo npm install -g hexo</code></pre><p>2.部署Hexo<br>    $ hexo init<br>注：这个命令会初始化博客的目录，所以，执行这个命令时，在你想创建的目录下执行，就自动生成到对应目录下。<br>执行命令生，会在当前命令的路径下，生成以下文件：</p><pre><code>.├── .deploy├── public├── scaffolds├── scripts├── source|   ├── _drafts|   └── _posts├── themes├── _config.yml└── package.json</code></pre><p>.deploy：执行hexo deploy命令部署到GitHub上的内容目录<br>public：执行hexo generate命令，输出的静态网页内容目录<br>scaffolds：layout模板文件目录，其中的md文件可以添加编辑<br>scripts：扩展脚本目录，这里可以自定义一些javascript脚本<br>source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。<br>_drafts：草稿文章<br>_posts：发布文章<br>themes：主题文件目录<br>_config.yml：全局配置文件，大多数的设置都在这里<br>package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮<br>3.Hexo命令<br>Hexo下，通过 _config.yml 设置博客，可以想象成我们用的软件里的设置一样，只是它通过一个文件列出这些参数，然后让我们填写和修改。</p><p>全局设置<br>在你博客目录下有一个文件名_config.yml，打开可以配置信息。</p><p>局部页面<br>在你博客目录下 \themes\你使用的主题_config.yml</p><p>写博客相关命令<br>    Hexo常用命令：</p><pre><code>hexo new &quot;postName&quot;       #新建文章hexo new page &quot;pageName&quot;  #新建页面hexo generate             #生成静态页面至public目录hexo server               #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）hexo deploy               #将.deploy目录部署到GitHub</code></pre><p>当然，如果每次输入那么长命令，那么一定想到用简写：</p><pre><code>hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy</code></pre><p>其它的，还可以复合命令：</p><pre><code>hexo deploy -ghexo server -g</code></pre><p>有时候生成的网页出错了，而生成的rss其实没有清除，那么用下面的命令，在重新生成吧</p><pre><code>$ hexo clean</code></pre><p>当本地调试出现诡异现象时候，请先使用 hexo clean 清理已经生成的静态文件后重试。</p><p>注：Hexo原理就是hexo在执行hexo generate时会在本地先把博客生成的一套静态站点放到public文件夹中，在执行hexo deploy时将其复制到.deploy文件夹中。Github的版本库通常建议同时附上README.md说明文件，但是hexo默认情况下会把所有md文件解析成html文件，所以即使你在线生成了README.md，它也会在你下一次部署时被删去。怎么解决呢？<br>在执行hexo deploy前把在本地写好的README.md文件复制到.deploy文件夹中，再去执行hexo deploy。<br>4.一些报错处理<br>坑2<br>一</p><pre><code>ERROR Plugin load failed: hexo-server</code></pre><p>原因：<br>Besides, utilities are separated into a standalone module. hexo.util is not reachable anymore.<br>解决方法，执行命令：</p><pre><code>sudo npm install hexo-server</code></pre><p>二</p><p>执行命令hexo server，有如下提示：<br>Usage: hexo<br>….<br>原因：<br>我认为是没有生成本地服务<br>解决方法，执行命令：</p><pre><code>npm install hexo-server --save</code></pre><p>提示：<a href="mailto:hexo-server@0.1.2" target="_blank" rel="noopener">hexo-server@0.1.2</a> node_modules/hexo-server<br>三<br>白板和Cannot GET / 几个字<br>原因:<br>由于2.6以后就更新了，我们需要手动配置些东西，我们需要输入下面三行命令：</p><pre><code>npm install hexo-renderer-ejs --savenpm install hexo-renderer-stylus --savenpm install hexo-renderer-marked --save</code></pre><p>   这个时候再重新生成静态文件，命令：</p><pre><code>hexo generate （或hexo g）</code></pre><p>   启动本地服务器：</p><pre><code>hexo server （或hexo s）</code></pre><p>5.博客管理<br>上面命令中，其实生成文章，可以直接把写好的文章插入到目录/_posts 下面，后缀为.MD就行，在文章头部固定格式：</p><pre><code>title: Mac提高使用效率的一些方法   #文章的标题，这个才是显示的文章标题，其实文件名不影响date: 2015-09-01 20:33:26      #用命令会自动生成，也可以自己写，所以文章时间可以改categories: technology         #文章的分类，这个可以自己定义tags: [Mac,效率,快捷方式]        #tag，为文章添加标签，方便搜索---</code></pre><p>当然，里面有很多东西的，如果你专注于写作，那么可以不用太关心了，比如tags标签可以写成下面那样，因为hexo文章的头部文件是用AML来写的。</p><pre><code>tags:- tag1- tag2</code></pre><p>如果在博客文章列表中，不想全文显示，可以增加 <a id="more"></a>, 后面的内容就不会显示在列表。</p><pre><code>&lt;!--more--&gt;</code></pre><p>6.插件<br>安装插件</p><pre><code>$ npm install &lt;plugin-name&gt; --save</code></pre><p>添加RSS</p><pre><code>npm install hexo-generator-feed</code></pre><p>然后，到博客目录 /public 下，如果没有发现atom.xml，说明命令没有生效！！！(楼主就是在这里被坑了次)<br>解决方法：</p><pre><code>$ npm install hexo-generator-feed --save</code></pre><p>这个命令来自hexo-generator-feed</p><p>  Install</p><pre><code> $ npm install hexo-generator-feed --saveHexo 3: 1.xHexo 2: 0.xOptions You can configure this plugin in _config.yml.feed:   type: atom   path: atom.xml   limit: 20  type - Feed type. (atom/rss2)  path - Feed path. (Default: atom.xml/rss2.xml)  limit - Maximum number of posts in the feed (Use 0 or false to show all posts)</code></pre><p>其中可以选择：<br>然后在 Hexo 根目录下的 _config.yml 里配置一下</p><pre><code>feed:    type: atom    path: atom.xml    limit: 20#type 表示类型, 是 atom 还是 rss2.#path 表示 Feed 路径#limit 最多多少篇最近文章</code></pre><p>最后，在 hexo generate之后，会发现public文件夹下多了atom.xml！</p><p>例如要订阅我的blog只要输入ihtc.cc/atom就可以搜寻到啦！</p><p>添加Sitemap<br>Sitemap 的提交主要的目的，是要避免搜索引擎的爬虫没有完整的收录整个网页的内容，所以提交 Sitemap 是能够补足搜索引擎的不足，进而加速网页的收录速度，达到搜寻引擎友好的目的。</p><pre><code>$ npm install hexo-generator-sitemap --save</code></pre><p>这个命令来自hexo-generator-sitemap</p><pre><code>Install    $ npm install hexo-generator-sitemap --save    Hexo 3: 1.x    Hexo 2: 0.xOptions    You can configure this plugin in _config.yml.    sitemap:        path: sitemap.xml    path - Sitemap path. (Default: sitemap.xml)</code></pre><p>同样可以选择：<br>在 Hexo 根目录下的 _config.yml 里配置一下</p><pre><code>sitemap:   path: sitemap.xml   #path 表示 Sitemap 的路径. 默认为 sitemap.xml.</code></pre><p>对于国内用户还需要安装插件 hexo-generator-baidu-sitemap, 顾名思义是为百度量身打造的. 安装</p><pre><code>$ npm install hexo-generator-baidu-sitemap --save</code></pre><p>然后在 Hexo 根目录下的 _config.yml 里配置一下</p><pre><code>baidusitemap:     path: baidusitemap.xml</code></pre><p>为了博客有更好的展示率, 最好的方式是通过搜索引擎, 提交 Sitemap文件是一个方式，具体可参考：</p><p>Hexo 优化与定制(二)<br>｜Hexo优化｜如何向google提交sitemap（详细） | Fiona’s Blog</p><p>其它插件<br>Plugins · hexojs/hexo</p><p>7.评论设置<br>在Hexo中，默认使用的评论是国外的Disqus,不过因为国内的”网络环境”问题，我们改为国内的多说评论系统。</p><p>需要说明的是 short_name:字段，这个字段为你多说填写的站点名字，比如我的域名：ihtcboy.duoshuo.com，那么我的short_name:”ihtcboy”</p><p>8.404页面<br>GitHub Pages 自定义404页面非常容易，直接在根目录下创建自己的404.html就可以。但是自定义404页面仅对绑定顶级域名的项目才起作用，GitHub默认分配的二级域名是不起作用的，使用hexo server在本机调试也是不起作用的。<br>其实，404页面可以做更多有意义的事，来做个404公益项目吧。<br>腾讯公益 404.html :</p><pre><code>&lt;html&gt;&lt;head&gt;       &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;404&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;br&gt;&lt;!--&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot; /&gt;    &lt;title&gt;公益404 | 不如&lt;/title&gt;&lt;/head&gt;&lt;body&gt;#404 Not found By Bruce&lt;h1&gt;404 Page Not Found&lt;/h1&gt;--&gt;&lt;br&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://www.qq.com/404/search_children.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;br&gt;&lt;!--公益404介接入地址益云公益404 http://yibo.iyiyun.com/Index/web404腾讯公益404 http://www.qq.com/404失蹤兒童少年資料管理中心404 http://404page.missingkids.org.tw--&gt;&lt;br&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>复制上面代码，贴粘到目录下新建的404.html即可！<br>9.统计<br>因Google Analytics偶尔被墙，故国内用百度统计<br>最新的统计服务已经开放，两行代码轻松搞定，你可以直接使用：不蒜子<br>本人墙裂推荐，只需要两行代码哦。各种用法实例和显示效果参考不蒜子文档中的实例链接。不蒜子，极客的算子，极简的算子，任你发挥的算子。</p><p>为hexo博客添加访问次数统计功能 | 不如<br>10.更新<br>更新hexo：</p><pre><code>npm update -g hexo</code></pre><p>更新主题：</p><pre><code>cd themes/你的主题git pull</code></pre><p>更新插件：</p><pre><code>npm update</code></pre><p>11.总结<br>本文主要是解释了自己搭建过程中遇到的问题，还有综合了其它Hexo教程的总结，还有图床、搜索、CDN加速等内容没有说到，大家用到可以自行百度谷歌！</p><p>12.参考引用<br>如何搭建一个独立博客——简明Github Pages与Hexo教程<br>hexo系列教程：（一）hexo介绍 | Zippera’s blog<br>hexo系列教程：（二）搭建hexo博客 | Zippera’s blog<br>hexo你的博客 | 不如<br>使用hexo搭建博客 | Alimon’s Blog<br>hexo边搭边记 | sunnyxx的技术博客<br>hexo搭建静态博客以及优化 | Joanna’s coding blog<br>HEXO+Github,搭建属于自己的博客 - 简书<br>在hexo自訂rss | kpman | code<br>RSS/Atom、Sitemap for SEO | Michael Hsu.tw<br>Hexo 优化与定制(二) | Kang Lu’s Blog<br>Hexo | { GoonX }<br>不蒜子 | 不如<br>13.搭建博客相关网站<br>Hexo官网<br>hexojs/hexo<br>GitHub Pages</p><p>注：本文首发于 iHTC’ Blog，如若转载，请注来源</p><p>文／iHTCboy（简书作者）<br>原文链接：<a href="http://www.jianshu.com/p/35e197cb1273" target="_blank" rel="noopener">http://www.jianshu.com/p/35e197cb1273</a><br>著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目录：&lt;/p&gt;
&lt;p&gt;1.安装Hexo&lt;br&gt;2.部署Hexo&lt;br&gt;3.Hexo命令&lt;br&gt;4.一些报错处理&lt;br&gt;5.博客管理&lt;br&gt;6.插件（RSS、Sitemap）&lt;br&gt;7.评论设置&lt;br&gt;8.404页面&lt;br&gt;9.统计&lt;br&gt;10.更新&lt;br&gt;11.总结&lt;br&gt;12.参考引用&lt;br&gt;13.搭建博客相关网站&lt;br&gt;简述&lt;br&gt;本文主要讲解Hexo安装时遇到的坑，Hexo安装之后的使用教程，Hexo安装需要的环境和教程，请自行百度、谷歌。&lt;/p&gt;
&lt;p&gt;1.安装Hexo&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ npm install -g hexo
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;坑1&lt;br&gt;这里可能安装失败，可能权限不够，在命令前加sudo&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo npm install -g hexo
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2.部署Hexo&lt;br&gt;    $ hexo init&lt;br&gt;注：这个命令会初始化博客的目录，所以，执行这个命令时，在你想创建的目录下执行，就自动生成到对应目录下。&lt;br&gt;执行命令生，会在当前命令的路径下，生成以下文件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.
├── .deploy
├── public
├── scaffolds
├── scripts
├── source
|   ├── _drafts
|   └── _posts
├── themes
├── _config.yml
└── package.json
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;.deploy：执行hexo deploy命令部署到GitHub上的内容目录&lt;br&gt;public：执行hexo generate命令，输出的静态网页内容目录&lt;br&gt;scaffolds：layout模板文件目录，其中的md文件可以添加编辑&lt;br&gt;scripts：扩展脚本目录，这里可以自定义一些javascript脚本&lt;br&gt;source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。&lt;br&gt;_drafts：草稿文章&lt;br&gt;_posts：发布文章&lt;br&gt;themes：主题文件目录&lt;br&gt;_config.yml：全局配置文件，大多数的设置都在这里&lt;br&gt;package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮&lt;br&gt;3.Hexo命令&lt;br&gt;Hexo下，通过 _config.yml 设置博客，可以想象成我们用的软件里的设置一样，只是它通过一个文件列出这些参数，然后让我们填写和修改。&lt;/p&gt;
&lt;p&gt;全局设置&lt;br&gt;在你博客目录下有一个文件名_config.yml，打开可以配置信息。&lt;/p&gt;
&lt;p&gt;局部页面&lt;br&gt;在你博客目录下 \themes\你使用的主题_config.yml&lt;/p&gt;
&lt;p&gt;写博客相关命令&lt;br&gt;    Hexo常用命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hexo new &amp;quot;postName&amp;quot;       #新建文章
hexo new page &amp;quot;pageName&amp;quot;  #新建页面
hexo generate             #生成静态页面至public目录
hexo server               #开启预览访问端口（默认端口4000，&amp;apos;ctrl + c&amp;apos;关闭server）
hexo deploy               #将.deploy目录部署到GitHub
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当然，如果每次输入那么长命令，那么一定想到用简写：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hexo n == hexo new
hexo g == hexo generate
hexo s == hexo server
hexo d == hexo deploy
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其它的，还可以复合命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hexo deploy -g
hexo server -g
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有时候生成的网页出错了，而生成的rss其实没有清除，那么用下面的命令，在重新生成吧&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hexo clean
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当本地调试出现诡异现象时候，请先使用 hexo clean 清理已经生成的静态文件后重试。&lt;/p&gt;
&lt;p&gt;注：Hexo原理就是hexo在执行hexo generate时会在本地先把博客生成的一套静态站点放到public文件夹中，在执行hexo deploy时将其复制到.deploy文件夹中。Github的版本库通常建议同时附上README.md说明文件，但是hexo默认情况下会把所有md文件解析成html文件，所以即使你在线生成了README.md，它也会在你下一次部署时被删去。怎么解决呢？&lt;br&gt;在执行hexo deploy前把在本地写好的README.md文件复制到.deploy文件夹中，再去执行hexo deploy。&lt;br&gt;4.一些报错处理&lt;br&gt;坑2&lt;br&gt;一&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ERROR Plugin load failed: hexo-server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;原因：&lt;br&gt;Besides, utilities are separated into a standalone module. hexo.util is not reachable anymore.&lt;br&gt;解决方法，执行命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo npm install hexo-server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;二&lt;/p&gt;
&lt;p&gt;执行命令hexo server，有如下提示：&lt;br&gt;Usage: hexo&lt;br&gt;….&lt;br&gt;原因：&lt;br&gt;我认为是没有生成本地服务&lt;br&gt;解决方法，执行命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install hexo-server --save
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;提示：&lt;a href=&quot;mailto:hexo-server@0.1.2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-server@0.1.2&lt;/a&gt; node_modules/hexo-server&lt;br&gt;三&lt;br&gt;白板和Cannot GET / 几个字&lt;br&gt;原因:&lt;br&gt;由于2.6以后就更新了，我们需要手动配置些东西，我们需要输入下面三行命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install hexo-renderer-ejs --save
npm install hexo-renderer-stylus --save
npm install hexo-renderer-marked --save
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;   这个时候再重新生成静态文件，命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hexo generate （或hexo g）
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;   启动本地服务器：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hexo server （或hexo s）
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5.博客管理&lt;br&gt;上面命令中，其实生成文章，可以直接把写好的文章插入到目录/_posts 下面，后缀为.MD就行，在文章头部固定格式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;title: Mac提高使用效率的一些方法   #文章的标题，这个才是显示的文章标题，其实文件名不影响
date: 2015-09-01 20:33:26      #用命令会自动生成，也可以自己写，所以文章时间可以改
categories: technology         #文章的分类，这个可以自己定义
tags: [Mac,效率,快捷方式]        #tag，为文章添加标签，方便搜索
---
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当然，里面有很多东西的，如果你专注于写作，那么可以不用太关心了，比如tags标签可以写成下面那样，因为hexo文章的头部文件是用AML来写的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tags:
- tag1
- tag2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果在博客文章列表中，不想全文显示，可以增加
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello 2017！</title>
    <link href="http://blog.nluyou.com/2017/01/03/my-first-blog/"/>
    <id>http://blog.nluyou.com/2017/01/03/my-first-blog/</id>
    <published>2017-01-03T02:43:35.000Z</published>
    <updated>2018-02-20T05:48:29.295Z</updated>
    
    <content type="html"><![CDATA[<p>Happy new year ! hello 2017! 2017-01-01<br>你好！2017！ 一起同行，加油，学习python!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Happy new year ! hello 2017! 2017-01-01&lt;br&gt;你好！2017！ 一起同行，加油，学习python!&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="随笔" scheme="http://blog.nluyou.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
